
Led Control Center.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000011ba  0000124e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001bd  00800062  00800062  00001250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000961  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bf  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000454  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031b  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  000028e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	c1 c5       	rjmp	.+2946   	; 0xb9a <__vector_11>
      18:	18 c6       	rjmp	.+3120   	; 0xc4a <__vector_12>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ea eb       	ldi	r30, 0xBA	; 186
      3a:	f1 e1       	ldi	r31, 0x11	; 17
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 36       	cpi	r26, 0x62	; 98
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	a2 e6       	ldi	r26, 0x62	; 98
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	af 31       	cpi	r26, 0x1F	; 31
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	43 d1       	rcall	.+646    	; 0x2e0 <main>
      5a:	ad c8       	rjmp	.-3750   	; 0xfffff1b6 <__eeprom_end+0xff7ef1b6>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_strip_write>:
"period" = 1300 ns

SOURCE: https://github.com/pololu/pololu-led-strip-avr/blob/master/led_strip.c
*/
void __attribute__((noinline)) led_strip_write(rgb_color * colors, unsigned int count)
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
      66:	a4 97       	sbiw	r28, 0x24	; 36
      68:	0f b6       	in	r0, 0x3f	; 63
      6a:	f8 94       	cli
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	0f be       	out	0x3f, r0	; 63
      70:	cd bf       	out	0x3d, r28	; 61
      72:	9a a3       	std	Y+34, r25	; 0x22
      74:	89 a3       	std	Y+33, r24	; 0x21
      76:	7c a3       	std	Y+36, r23	; 0x24
      78:	6b a3       	std	Y+35, r22	; 0x23
	// Set the pin to be an output driving low.
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
      7a:	85 e3       	ldi	r24, 0x35	; 53
      7c:	90 e0       	ldi	r25, 0x00	; 0
      7e:	25 e3       	ldi	r18, 0x35	; 53
      80:	30 e0       	ldi	r19, 0x00	; 0
      82:	f9 01       	movw	r30, r18
      84:	20 81       	ld	r18, Z
      86:	2e 7f       	andi	r18, 0xFE	; 254
      88:	fc 01       	movw	r30, r24
      8a:	20 83       	st	Z, r18
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
      8c:	84 e3       	ldi	r24, 0x34	; 52
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	24 e3       	ldi	r18, 0x34	; 52
      92:	30 e0       	ldi	r19, 0x00	; 0
      94:	f9 01       	movw	r30, r18
      96:	20 81       	ld	r18, Z
      98:	21 60       	ori	r18, 0x01	; 1
      9a:	fc 01       	movw	r30, r24
      9c:	20 83       	st	Z, r18

	cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
      9e:	f8 94       	cli
	while(count--)
      a0:	2a c0       	rjmp	.+84     	; 0xf6 <led_strip_asm_end43+0xc>
	{
		// Send a color to the LED strip.
		// The assembly below also increments the 'colors' pointer,
		// it will be pointing to the next color at the end of this loop.
		asm volatile(
      a2:	89 a1       	ldd	r24, Y+33	; 0x21
      a4:	9a a1       	ldd	r25, Y+34	; 0x22
      a6:	fc 01       	movw	r30, r24
      a8:	01 90       	ld	r0, Z+
      aa:	00 80       	ld	r0, Z
      ac:	07 d0       	rcall	.+14     	; 0xbc <send_led_strip_byte43>
      ae:	02 90       	ld	r0, -Z
      b0:	05 d0       	rcall	.+10     	; 0xbc <send_led_strip_byte43>
      b2:	01 90       	ld	r0, Z+
      b4:	01 90       	ld	r0, Z+
      b6:	01 90       	ld	r0, Z+
      b8:	01 d0       	rcall	.+2      	; 0xbc <send_led_strip_byte43>
      ba:	17 c0       	rjmp	.+46     	; 0xea <led_strip_asm_end43>

000000bc <send_led_strip_byte43>:
      bc:	08 d0       	rcall	.+16     	; 0xce <send_led_strip_bit43>
      be:	07 d0       	rcall	.+14     	; 0xce <send_led_strip_bit43>
      c0:	06 d0       	rcall	.+12     	; 0xce <send_led_strip_bit43>
      c2:	05 d0       	rcall	.+10     	; 0xce <send_led_strip_bit43>
      c4:	04 d0       	rcall	.+8      	; 0xce <send_led_strip_bit43>
      c6:	03 d0       	rcall	.+6      	; 0xce <send_led_strip_bit43>
      c8:	02 d0       	rcall	.+4      	; 0xce <send_led_strip_bit43>
      ca:	01 d0       	rcall	.+2      	; 0xce <send_led_strip_bit43>
      cc:	08 95       	ret

000000ce <send_led_strip_bit43>:
      ce:	a8 9a       	sbi	0x15, 0	; 21
      d0:	00 1c       	adc	r0, r0
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	08 f0       	brcs	.+2      	; 0xda <send_led_strip_bit43+0xc>
      d8:	a8 98       	cbi	0x15, 0	; 21
	...
      e2:	00 00       	nop
      e4:	08 f4       	brcc	.+2      	; 0xe8 <send_led_strip_bit43+0x1a>
      e6:	a8 98       	cbi	0x15, 0	; 21
      e8:	08 95       	ret

000000ea <led_strip_asm_end43>:
      ea:	cf 01       	movw	r24, r30
      ec:	9a a3       	std	Y+34, r25	; 0x22
      ee:	89 a3       	std	Y+33, r24	; 0x21
		"I" (_SFR_IO_ADDR(LED_STRIP_PORT)),   // %2 is the port register (e.g. PORTC)
		"I" (LED_STRIP_PIN)     // %3 is the pin number (0-8)
		);

		// Uncomment the line below to temporarily enable interrupts between each color.
		sei(); asm volatile("nop\n"); cli();
      f0:	78 94       	sei
      f2:	00 00       	nop
      f4:	f8 94       	cli
	// Set the pin to be an output driving low.
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

	cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
	while(count--)
      f6:	8b a1       	ldd	r24, Y+35	; 0x23
      f8:	9c a1       	ldd	r25, Y+36	; 0x24
      fa:	9c 01       	movw	r18, r24
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	31 09       	sbc	r19, r1
     100:	3c a3       	std	Y+36, r19	; 0x24
     102:	2b a3       	std	Y+35, r18	; 0x23
     104:	89 2b       	or	r24, r25
     106:	09 f0       	breq	.+2      	; 0x10a <led_strip_asm_end43+0x20>
     108:	cc cf       	rjmp	.-104    	; 0xa2 <led_strip_write+0x44>
		);

		// Uncomment the line below to temporarily enable interrupts between each color.
		sei(); asm volatile("nop\n"); cli();
	}
	sei();          // Re-enable interrupts now that we are done.
     10a:	78 94       	sei
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	a8 e4       	ldi	r26, 0x48	; 72
     112:	b2 e4       	ldi	r27, 0x42	; 66
     114:	89 83       	std	Y+1, r24	; 0x01
     116:	9a 83       	std	Y+2, r25	; 0x02
     118:	ab 83       	std	Y+3, r26	; 0x03
     11a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     11c:	2b ea       	ldi	r18, 0xAB	; 171
     11e:	3a ea       	ldi	r19, 0xAA	; 170
     120:	4a ea       	ldi	r20, 0xAA	; 170
     122:	50 e4       	ldi	r21, 0x40	; 64
     124:	69 81       	ldd	r22, Y+1	; 0x01
     126:	7a 81       	ldd	r23, Y+2	; 0x02
     128:	8b 81       	ldd	r24, Y+3	; 0x03
     12a:	9c 81       	ldd	r25, Y+4	; 0x04
     12c:	e1 d7       	rcall	.+4034   	; 0x10f0 <__mulsf3>
     12e:	dc 01       	movw	r26, r24
     130:	cb 01       	movw	r24, r22
     132:	8d 83       	std	Y+5, r24	; 0x05
     134:	9e 83       	std	Y+6, r25	; 0x06
     136:	af 83       	std	Y+7, r26	; 0x07
     138:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e8       	ldi	r20, 0x80	; 128
     140:	50 e4       	ldi	r21, 0x40	; 64
     142:	69 81       	ldd	r22, Y+1	; 0x01
     144:	7a 81       	ldd	r23, Y+2	; 0x02
     146:	8b 81       	ldd	r24, Y+3	; 0x03
     148:	9c 81       	ldd	r25, Y+4	; 0x04
     14a:	d2 d7       	rcall	.+4004   	; 0x10f0 <__mulsf3>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	89 87       	std	Y+9, r24	; 0x09
     152:	9a 87       	std	Y+10, r25	; 0x0a
     154:	ab 87       	std	Y+11, r26	; 0x0b
     156:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e8       	ldi	r20, 0x80	; 128
     15e:	5f e3       	ldi	r21, 0x3F	; 63
     160:	6d 81       	ldd	r22, Y+5	; 0x05
     162:	7e 81       	ldd	r23, Y+6	; 0x06
     164:	8f 81       	ldd	r24, Y+7	; 0x07
     166:	98 85       	ldd	r25, Y+8	; 0x08
     168:	b2 d6       	rcall	.+3428   	; 0xece <__cmpsf2>
     16a:	88 23       	and	r24, r24
     16c:	1c f4       	brge	.+6      	; 0x174 <led_strip_asm_end43+0x8a>
		__ticks = 1;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	8d 87       	std	Y+13, r24	; 0x0d
     172:	a7 c0       	rjmp	.+334    	; 0x2c2 <led_strip_asm_end43+0x1d8>
	else if (__tmp2 > 65535)
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	3f ef       	ldi	r19, 0xFF	; 255
     178:	4f e7       	ldi	r20, 0x7F	; 127
     17a:	57 e4       	ldi	r21, 0x47	; 71
     17c:	69 85       	ldd	r22, Y+9	; 0x09
     17e:	7a 85       	ldd	r23, Y+10	; 0x0a
     180:	8b 85       	ldd	r24, Y+11	; 0x0b
     182:	9c 85       	ldd	r25, Y+12	; 0x0c
     184:	b1 d7       	rcall	.+3938   	; 0x10e8 <__gesf2>
     186:	18 16       	cp	r1, r24
     188:	0c f0       	brlt	.+2      	; 0x18c <led_strip_asm_end43+0xa2>
     18a:	74 c0       	rjmp	.+232    	; 0x274 <led_strip_asm_end43+0x18a>
	{
		_delay_ms(__us / 1000.0);
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	4a e7       	ldi	r20, 0x7A	; 122
     192:	54 e4       	ldi	r21, 0x44	; 68
     194:	69 81       	ldd	r22, Y+1	; 0x01
     196:	7a 81       	ldd	r23, Y+2	; 0x02
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	9c d6       	rcall	.+3384   	; 0xed6 <__divsf3>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	8e 87       	std	Y+14, r24	; 0x0e
     1a4:	9f 87       	std	Y+15, r25	; 0x0f
     1a6:	a8 8b       	std	Y+16, r26	; 0x10
     1a8:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	4a e7       	ldi	r20, 0x7A	; 122
     1b0:	55 e4       	ldi	r21, 0x45	; 69
     1b2:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b4:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b6:	88 89       	ldd	r24, Y+16	; 0x10
     1b8:	99 89       	ldd	r25, Y+17	; 0x11
     1ba:	9a d7       	rcall	.+3892   	; 0x10f0 <__mulsf3>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	8a 8b       	std	Y+18, r24	; 0x12
     1c2:	9b 8b       	std	Y+19, r25	; 0x13
     1c4:	ac 8b       	std	Y+20, r26	; 0x14
     1c6:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e8       	ldi	r20, 0x80	; 128
     1ce:	5f e3       	ldi	r21, 0x3F	; 63
     1d0:	6a 89       	ldd	r22, Y+18	; 0x12
     1d2:	7b 89       	ldd	r23, Y+19	; 0x13
     1d4:	8c 89       	ldd	r24, Y+20	; 0x14
     1d6:	9d 89       	ldd	r25, Y+21	; 0x15
     1d8:	7a d6       	rcall	.+3316   	; 0xece <__cmpsf2>
     1da:	88 23       	and	r24, r24
     1dc:	2c f4       	brge	.+10     	; 0x1e8 <led_strip_asm_end43+0xfe>
		__ticks = 1;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	9f 8b       	std	Y+23, r25	; 0x17
     1e4:	8e 8b       	std	Y+22, r24	; 0x16
     1e6:	3b c0       	rjmp	.+118    	; 0x25e <led_strip_asm_end43+0x174>
	else if (__tmp > 65535)
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	3f ef       	ldi	r19, 0xFF	; 255
     1ec:	4f e7       	ldi	r20, 0x7F	; 127
     1ee:	57 e4       	ldi	r21, 0x47	; 71
     1f0:	6a 89       	ldd	r22, Y+18	; 0x12
     1f2:	7b 89       	ldd	r23, Y+19	; 0x13
     1f4:	8c 89       	ldd	r24, Y+20	; 0x14
     1f6:	9d 89       	ldd	r25, Y+21	; 0x15
     1f8:	77 d7       	rcall	.+3822   	; 0x10e8 <__gesf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	3c f5       	brge	.+78     	; 0x24c <led_strip_asm_end43+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e2       	ldi	r20, 0x20	; 32
     204:	51 e4       	ldi	r21, 0x41	; 65
     206:	6e 85       	ldd	r22, Y+14	; 0x0e
     208:	7f 85       	ldd	r23, Y+15	; 0x0f
     20a:	88 89       	ldd	r24, Y+16	; 0x10
     20c:	99 89       	ldd	r25, Y+17	; 0x11
     20e:	70 d7       	rcall	.+3808   	; 0x10f0 <__mulsf3>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	bc 01       	movw	r22, r24
     216:	cd 01       	movw	r24, r26
     218:	c6 d6       	rcall	.+3468   	; 0xfa6 <__fixunssfsi>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	9f 8b       	std	Y+23, r25	; 0x17
     220:	8e 8b       	std	Y+22, r24	; 0x16
     222:	0f c0       	rjmp	.+30     	; 0x242 <led_strip_asm_end43+0x158>
     224:	80 e9       	ldi	r24, 0x90	; 144
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	99 8f       	std	Y+25, r25	; 0x19
     22a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22c:	88 8d       	ldd	r24, Y+24	; 0x18
     22e:	99 8d       	ldd	r25, Y+25	; 0x19
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <led_strip_asm_end43+0x146>
     234:	99 8f       	std	Y+25, r25	; 0x19
     236:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     238:	8e 89       	ldd	r24, Y+22	; 0x16
     23a:	9f 89       	ldd	r25, Y+23	; 0x17
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	9f 8b       	std	Y+23, r25	; 0x17
     240:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     242:	8e 89       	ldd	r24, Y+22	; 0x16
     244:	9f 89       	ldd	r25, Y+23	; 0x17
     246:	89 2b       	or	r24, r25
     248:	69 f7       	brne	.-38     	; 0x224 <led_strip_asm_end43+0x13a>
     24a:	3b c0       	rjmp	.+118    	; 0x2c2 <led_strip_asm_end43+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     24c:	6a 89       	ldd	r22, Y+18	; 0x12
     24e:	7b 89       	ldd	r23, Y+19	; 0x13
     250:	8c 89       	ldd	r24, Y+20	; 0x14
     252:	9d 89       	ldd	r25, Y+21	; 0x15
     254:	a8 d6       	rcall	.+3408   	; 0xfa6 <__fixunssfsi>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	9f 8b       	std	Y+23, r25	; 0x17
     25c:	8e 8b       	std	Y+22, r24	; 0x16
     25e:	8e 89       	ldd	r24, Y+22	; 0x16
     260:	9f 89       	ldd	r25, Y+23	; 0x17
     262:	9b 8f       	std	Y+27, r25	; 0x1b
     264:	8a 8f       	std	Y+26, r24	; 0x1a
     266:	8a 8d       	ldd	r24, Y+26	; 0x1a
     268:	9b 8d       	ldd	r25, Y+27	; 0x1b
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <led_strip_asm_end43+0x180>
     26e:	9b 8f       	std	Y+27, r25	; 0x1b
     270:	8a 8f       	std	Y+26, r24	; 0x1a
     272:	27 c0       	rjmp	.+78     	; 0x2c2 <led_strip_asm_end43+0x1d8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	4f e7       	ldi	r20, 0x7F	; 127
     27a:	53 e4       	ldi	r21, 0x43	; 67
     27c:	6d 81       	ldd	r22, Y+5	; 0x05
     27e:	7e 81       	ldd	r23, Y+6	; 0x06
     280:	8f 81       	ldd	r24, Y+7	; 0x07
     282:	98 85       	ldd	r25, Y+8	; 0x08
     284:	31 d7       	rcall	.+3682   	; 0x10e8 <__gesf2>
     286:	18 16       	cp	r1, r24
     288:	a4 f4       	brge	.+40     	; 0x2b2 <led_strip_asm_end43+0x1c8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     28a:	69 85       	ldd	r22, Y+9	; 0x09
     28c:	7a 85       	ldd	r23, Y+10	; 0x0a
     28e:	8b 85       	ldd	r24, Y+11	; 0x0b
     290:	9c 85       	ldd	r25, Y+12	; 0x0c
     292:	89 d6       	rcall	.+3346   	; 0xfa6 <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	9d 8f       	std	Y+29, r25	; 0x1d
     29a:	8c 8f       	std	Y+28, r24	; 0x1c
     29c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     29e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     2a0:	9f 8f       	std	Y+31, r25	; 0x1f
     2a2:	8e 8f       	std	Y+30, r24	; 0x1e
     2a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <led_strip_asm_end43+0x1be>
     2ac:	9f 8f       	std	Y+31, r25	; 0x1f
     2ae:	8e 8f       	std	Y+30, r24	; 0x1e
     2b0:	0e c0       	rjmp	.+28     	; 0x2ce <led_strip_asm_end43+0x1e4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	6d 81       	ldd	r22, Y+5	; 0x05
     2b4:	7e 81       	ldd	r23, Y+6	; 0x06
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	75 d6       	rcall	.+3306   	; 0xfa6 <__fixunssfsi>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	8d 87       	std	Y+13, r24	; 0x0d
     2c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c4:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c6:	88 a1       	ldd	r24, Y+32	; 0x20
     2c8:	8a 95       	dec	r24
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <led_strip_asm_end43+0x1de>
     2cc:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(50);  // Hold the line low for 15 microseconds to send the reset signal.
}
     2ce:	a4 96       	adiw	r28, 0x24	; 36
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <main>:

//each color in this array represents a single led, index 0 being the first LED.
rgb_color colors[LED_COUNT];

int main()
{	
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	c5 55       	subi	r28, 0x55	; 85
     2ee:	d1 09       	sbc	r29, r1
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
	//init UART and make sure buffer is empty
	uart0_init(UART_BAUD_SELECT(BAUD_RATE, F_CPU));
     2fa:	87 e6       	ldi	r24, 0x67	; 103
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	f4 d4       	rcall	.+2536   	; 0xce8 <uart0_init>
	uart0_flush();
     300:	d7 d5       	rcall	.+2990   	; 0xeb0 <uart0_flush>
	
	uint8_t timer = 0;
     302:	19 82       	std	Y+1, r1	; 0x01
	uint8_t incr = 3;
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t victory = 0;
     308:	1b 82       	std	Y+3, r1	; 0x03
	
	DDRD &= ~(1<<PD3);
     30a:	81 e3       	ldi	r24, 0x31	; 49
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	21 e3       	ldi	r18, 0x31	; 49
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	27 7f       	andi	r18, 0xF7	; 247
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	DDRD &= ~(1<<PD2);
     31c:	81 e3       	ldi	r24, 0x31	; 49
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	21 e3       	ldi	r18, 0x31	; 49
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	2b 7f       	andi	r18, 0xFB	; 251
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
	
	DDRB &= (1<<PB1);
     32e:	87 e3       	ldi	r24, 0x37	; 55
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	27 e3       	ldi	r18, 0x37	; 55
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	22 70       	andi	r18, 0x02	; 2
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
	
	PORTD |= (1<<PD3)|(1<<PD2);
     340:	82 e3       	ldi	r24, 0x32	; 50
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	22 e3       	ldi	r18, 0x32	; 50
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	2c 60       	ori	r18, 0x0C	; 12
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
	
	for(uint8_t i = 0; i < LED_COUNT; i++)
     352:	1c 82       	std	Y+4, r1	; 0x04
     354:	22 c0       	rjmp	.+68     	; 0x39a <main+0xba>
	{
		colors[i] = (rgb_color){0, 0, 0};
     356:	8c 81       	ldd	r24, Y+4	; 0x04
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	9c 01       	movw	r18, r24
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	28 0f       	add	r18, r24
     364:	39 1f       	adc	r19, r25
     366:	25 59       	subi	r18, 0x95	; 149
     368:	3e 4f       	sbci	r19, 0xFE	; 254
     36a:	f9 01       	movw	r30, r18
     36c:	10 82       	st	Z, r1
     36e:	9c 01       	movw	r18, r24
     370:	22 0f       	add	r18, r18
     372:	33 1f       	adc	r19, r19
     374:	28 0f       	add	r18, r24
     376:	39 1f       	adc	r19, r25
     378:	24 59       	subi	r18, 0x94	; 148
     37a:	3e 4f       	sbci	r19, 0xFE	; 254
     37c:	f9 01       	movw	r30, r18
     37e:	10 82       	st	Z, r1
     380:	9c 01       	movw	r18, r24
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	28 0f       	add	r18, r24
     388:	39 1f       	adc	r19, r25
     38a:	c9 01       	movw	r24, r18
     38c:	83 59       	subi	r24, 0x93	; 147
     38e:	9e 4f       	sbci	r25, 0xFE	; 254
     390:	fc 01       	movw	r30, r24
     392:	10 82       	st	Z, r1
	
	DDRB &= (1<<PB1);
	
	PORTD |= (1<<PD3)|(1<<PD2);
	
	for(uint8_t i = 0; i < LED_COUNT; i++)
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	8f 5f       	subi	r24, 0xFF	; 255
     398:	8c 83       	std	Y+4, r24	; 0x04
     39a:	8c 81       	ldd	r24, Y+4	; 0x04
     39c:	8c 33       	cpi	r24, 0x3C	; 60
     39e:	d8 f2       	brcs	.-74     	; 0x356 <main+0x76>
	{
		colors[i] = (rgb_color){0, 0, 0};
	}

	led_strip_write(colors, LED_COUNT);
     3a0:	6c e3       	ldi	r22, 0x3C	; 60
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	8b e6       	ldi	r24, 0x6B	; 107
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	5a de       	rcall	.-844    	; 0x5e <led_strip_write>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	a0 ea       	ldi	r26, 0xA0	; 160
     3b0:	b1 e4       	ldi	r27, 0x41	; 65
     3b2:	8d 87       	std	Y+13, r24	; 0x0d
     3b4:	9e 87       	std	Y+14, r25	; 0x0e
     3b6:	af 87       	std	Y+15, r26	; 0x0f
     3b8:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	4a e7       	ldi	r20, 0x7A	; 122
     3c0:	55 e4       	ldi	r21, 0x45	; 69
     3c2:	6d 85       	ldd	r22, Y+13	; 0x0d
     3c4:	7e 85       	ldd	r23, Y+14	; 0x0e
     3c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3c8:	98 89       	ldd	r25, Y+16	; 0x10
     3ca:	92 d6       	rcall	.+3364   	; 0x10f0 <__mulsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	89 8b       	std	Y+17, r24	; 0x11
     3d2:	9a 8b       	std	Y+18, r25	; 0x12
     3d4:	ab 8b       	std	Y+19, r26	; 0x13
     3d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e8       	ldi	r20, 0x80	; 128
     3de:	5f e3       	ldi	r21, 0x3F	; 63
     3e0:	69 89       	ldd	r22, Y+17	; 0x11
     3e2:	7a 89       	ldd	r23, Y+18	; 0x12
     3e4:	8b 89       	ldd	r24, Y+19	; 0x13
     3e6:	9c 89       	ldd	r25, Y+20	; 0x14
     3e8:	72 d5       	rcall	.+2788   	; 0xece <__cmpsf2>
     3ea:	88 23       	and	r24, r24
     3ec:	2c f4       	brge	.+10     	; 0x3f8 <main+0x118>
		__ticks = 1;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	9e 8b       	std	Y+22, r25	; 0x16
     3f4:	8d 8b       	std	Y+21, r24	; 0x15
     3f6:	3b c0       	rjmp	.+118    	; 0x46e <__stack+0xf>
	else if (__tmp > 65535)
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	4f e7       	ldi	r20, 0x7F	; 127
     3fe:	57 e4       	ldi	r21, 0x47	; 71
     400:	69 89       	ldd	r22, Y+17	; 0x11
     402:	7a 89       	ldd	r23, Y+18	; 0x12
     404:	8b 89       	ldd	r24, Y+19	; 0x13
     406:	9c 89       	ldd	r25, Y+20	; 0x14
     408:	6f d6       	rcall	.+3294   	; 0x10e8 <__gesf2>
     40a:	18 16       	cp	r1, r24
     40c:	3c f5       	brge	.+78     	; 0x45c <main+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e2       	ldi	r20, 0x20	; 32
     414:	51 e4       	ldi	r21, 0x41	; 65
     416:	6d 85       	ldd	r22, Y+13	; 0x0d
     418:	7e 85       	ldd	r23, Y+14	; 0x0e
     41a:	8f 85       	ldd	r24, Y+15	; 0x0f
     41c:	98 89       	ldd	r25, Y+16	; 0x10
     41e:	68 d6       	rcall	.+3280   	; 0x10f0 <__mulsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	be d5       	rcall	.+2940   	; 0xfa6 <__fixunssfsi>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	9e 8b       	std	Y+22, r25	; 0x16
     430:	8d 8b       	std	Y+21, r24	; 0x15
     432:	0f c0       	rjmp	.+30     	; 0x452 <main+0x172>
     434:	80 e9       	ldi	r24, 0x90	; 144
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	98 8f       	std	Y+24, r25	; 0x18
     43a:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     43c:	8f 89       	ldd	r24, Y+23	; 0x17
     43e:	98 8d       	ldd	r25, Y+24	; 0x18
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <main+0x160>
     444:	98 8f       	std	Y+24, r25	; 0x18
     446:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     448:	8d 89       	ldd	r24, Y+21	; 0x15
     44a:	9e 89       	ldd	r25, Y+22	; 0x16
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	9e 8b       	std	Y+22, r25	; 0x16
     450:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     452:	8d 89       	ldd	r24, Y+21	; 0x15
     454:	9e 89       	ldd	r25, Y+22	; 0x16
     456:	89 2b       	or	r24, r25
     458:	69 f7       	brne	.-38     	; 0x434 <main+0x154>
     45a:	13 c0       	rjmp	.+38     	; 0x482 <__stack+0x23>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     45c:	69 89       	ldd	r22, Y+17	; 0x11
     45e:	7a 89       	ldd	r23, Y+18	; 0x12
     460:	8b 89       	ldd	r24, Y+19	; 0x13
     462:	9c 89       	ldd	r25, Y+20	; 0x14
     464:	a0 d5       	rcall	.+2880   	; 0xfa6 <__fixunssfsi>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	9e 8b       	std	Y+22, r25	; 0x16
     46c:	8d 8b       	std	Y+21, r24	; 0x15
     46e:	8d 89       	ldd	r24, Y+21	; 0x15
     470:	9e 89       	ldd	r25, Y+22	; 0x16
     472:	9a 8f       	std	Y+26, r25	; 0x1a
     474:	89 8f       	std	Y+25, r24	; 0x19
     476:	89 8d       	ldd	r24, Y+25	; 0x19
     478:	9a 8d       	ldd	r25, Y+26	; 0x1a
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
     47e:	9a 8f       	std	Y+26, r25	; 0x1a
     480:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(20);
	//uart0_puts("ready");
	
	while(1)
	{		
		PORTD |= (1<<7);
     482:	82 e3       	ldi	r24, 0x32	; 50
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	22 e3       	ldi	r18, 0x32	; 50
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f9 01       	movw	r30, r18
     48c:	20 81       	ld	r18, Z
     48e:	20 68       	ori	r18, 0x80	; 128
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
		uint8_t updated = 0;
     494:	1d 82       	std	Y+5, r1	; 0x05
		while(uart0_available() > 0) {
     496:	c5 c1       	rjmp	.+906    	; 0x822 <__stack+0x3c3>
			uint8_t ledMode = uart0_getc();
     498:	68 d4       	rcall	.+2256   	; 0xd6a <uart0_getc>
     49a:	8b 87       	std	Y+11, r24	; 0x0b
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	a0 ea       	ldi	r26, 0xA0	; 160
     4a2:	b1 e4       	ldi	r27, 0x41	; 65
     4a4:	8b 8f       	std	Y+27, r24	; 0x1b
     4a6:	9c 8f       	std	Y+28, r25	; 0x1c
     4a8:	ad 8f       	std	Y+29, r26	; 0x1d
     4aa:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	4a e7       	ldi	r20, 0x7A	; 122
     4b2:	55 e4       	ldi	r21, 0x45	; 69
     4b4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     4b6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     4b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4bc:	19 d6       	rcall	.+3122   	; 0x10f0 <__mulsf3>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	8f 8f       	std	Y+31, r24	; 0x1f
     4c4:	98 a3       	std	Y+32, r25	; 0x20
     4c6:	a9 a3       	std	Y+33, r26	; 0x21
     4c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     4d4:	78 a1       	ldd	r23, Y+32	; 0x20
     4d6:	89 a1       	ldd	r24, Y+33	; 0x21
     4d8:	9a a1       	ldd	r25, Y+34	; 0x22
     4da:	f9 d4       	rcall	.+2546   	; 0xece <__cmpsf2>
     4dc:	88 23       	and	r24, r24
     4de:	2c f4       	brge	.+10     	; 0x4ea <__stack+0x8b>
		__ticks = 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9c a3       	std	Y+36, r25	; 0x24
     4e6:	8b a3       	std	Y+35, r24	; 0x23
     4e8:	3b c0       	rjmp	.+118    	; 0x560 <__stack+0x101>
	else if (__tmp > 65535)
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	3f ef       	ldi	r19, 0xFF	; 255
     4ee:	4f e7       	ldi	r20, 0x7F	; 127
     4f0:	57 e4       	ldi	r21, 0x47	; 71
     4f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
     4f4:	78 a1       	ldd	r23, Y+32	; 0x20
     4f6:	89 a1       	ldd	r24, Y+33	; 0x21
     4f8:	9a a1       	ldd	r25, Y+34	; 0x22
     4fa:	f6 d5       	rcall	.+3052   	; 0x10e8 <__gesf2>
     4fc:	18 16       	cp	r1, r24
     4fe:	3c f5       	brge	.+78     	; 0x54e <__stack+0xef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e2       	ldi	r20, 0x20	; 32
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	6b 8d       	ldd	r22, Y+27	; 0x1b
     50a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     50c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     50e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     510:	ef d5       	rcall	.+3038   	; 0x10f0 <__mulsf3>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	bc 01       	movw	r22, r24
     518:	cd 01       	movw	r24, r26
     51a:	45 d5       	rcall	.+2698   	; 0xfa6 <__fixunssfsi>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	9c a3       	std	Y+36, r25	; 0x24
     522:	8b a3       	std	Y+35, r24	; 0x23
     524:	0f c0       	rjmp	.+30     	; 0x544 <__stack+0xe5>
     526:	80 e9       	ldi	r24, 0x90	; 144
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	9e a3       	std	Y+38, r25	; 0x26
     52c:	8d a3       	std	Y+37, r24	; 0x25
     52e:	8d a1       	ldd	r24, Y+37	; 0x25
     530:	9e a1       	ldd	r25, Y+38	; 0x26
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <__stack+0xd3>
     536:	9e a3       	std	Y+38, r25	; 0x26
     538:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     53a:	8b a1       	ldd	r24, Y+35	; 0x23
     53c:	9c a1       	ldd	r25, Y+36	; 0x24
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	9c a3       	std	Y+36, r25	; 0x24
     542:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     544:	8b a1       	ldd	r24, Y+35	; 0x23
     546:	9c a1       	ldd	r25, Y+36	; 0x24
     548:	89 2b       	or	r24, r25
     54a:	69 f7       	brne	.-38     	; 0x526 <__stack+0xc7>
     54c:	13 c0       	rjmp	.+38     	; 0x574 <__stack+0x115>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     54e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     550:	78 a1       	ldd	r23, Y+32	; 0x20
     552:	89 a1       	ldd	r24, Y+33	; 0x21
     554:	9a a1       	ldd	r25, Y+34	; 0x22
     556:	27 d5       	rcall	.+2638   	; 0xfa6 <__fixunssfsi>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	9c a3       	std	Y+36, r25	; 0x24
     55e:	8b a3       	std	Y+35, r24	; 0x23
     560:	8b a1       	ldd	r24, Y+35	; 0x23
     562:	9c a1       	ldd	r25, Y+36	; 0x24
     564:	98 a7       	std	Y+40, r25	; 0x28
     566:	8f a3       	std	Y+39, r24	; 0x27
     568:	8f a1       	ldd	r24, Y+39	; 0x27
     56a:	98 a5       	ldd	r25, Y+40	; 0x28
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <__stack+0x10d>
     570:	98 a7       	std	Y+40, r25	; 0x28
     572:	8f a3       	std	Y+39, r24	; 0x27
			_delay_ms(20);
			switch(ledMode)
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	91 05       	cpc	r25, r1
     57e:	09 f4       	brne	.+2      	; 0x582 <__stack+0x123>
     580:	4b c1       	rjmp	.+662    	; 0x818 <__stack+0x3b9>
     582:	83 30       	cpi	r24, 0x03	; 3
     584:	91 05       	cpc	r25, r1
     586:	19 f0       	breq	.+6      	; 0x58e <__stack+0x12f>
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	61 f1       	breq	.+88     	; 0x5e4 <__stack+0x185>
					victory = uart0_getc();
					
					break;
				}
				default:
					break;
     58c:	48 c1       	rjmp	.+656    	; 0x81e <__stack+0x3bf>
			_delay_ms(20);
			switch(ledMode)
			{
				case LED_MODE_STUNNED:
				{
					for(uint8_t i = 0; i < 40; i++)
     58e:	1e 82       	std	Y+6, r1	; 0x06
     590:	25 c0       	rjmp	.+74     	; 0x5dc <__stack+0x17d>
					{
						colors[i] = (rgb_color){122, 122, 122};
     592:	8e 81       	ldd	r24, Y+6	; 0x06
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	9c 01       	movw	r18, r24
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	28 0f       	add	r18, r24
     5a0:	39 1f       	adc	r19, r25
     5a2:	25 59       	subi	r18, 0x95	; 149
     5a4:	3e 4f       	sbci	r19, 0xFE	; 254
     5a6:	4a e7       	ldi	r20, 0x7A	; 122
     5a8:	f9 01       	movw	r30, r18
     5aa:	40 83       	st	Z, r20
     5ac:	9c 01       	movw	r18, r24
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	28 0f       	add	r18, r24
     5b4:	39 1f       	adc	r19, r25
     5b6:	24 59       	subi	r18, 0x94	; 148
     5b8:	3e 4f       	sbci	r19, 0xFE	; 254
     5ba:	4a e7       	ldi	r20, 0x7A	; 122
     5bc:	f9 01       	movw	r30, r18
     5be:	40 83       	st	Z, r20
     5c0:	9c 01       	movw	r18, r24
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	28 0f       	add	r18, r24
     5c8:	39 1f       	adc	r19, r25
     5ca:	c9 01       	movw	r24, r18
     5cc:	83 59       	subi	r24, 0x93	; 147
     5ce:	9e 4f       	sbci	r25, 0xFE	; 254
     5d0:	2a e7       	ldi	r18, 0x7A	; 122
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
			_delay_ms(20);
			switch(ledMode)
			{
				case LED_MODE_STUNNED:
				{
					for(uint8_t i = 0; i < 40; i++)
     5d6:	8e 81       	ldd	r24, Y+6	; 0x06
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	8e 83       	std	Y+6, r24	; 0x06
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	88 32       	cpi	r24, 0x28	; 40
     5e0:	c0 f2       	brcs	.-80     	; 0x592 <__stack+0x133>
					{
						colors[i] = (rgb_color){122, 122, 122};
					}
					break;
     5e2:	1d c1       	rjmp	.+570    	; 0x81e <__stack+0x3bf>
				}
				case LED_MODE_STATUS:
				{
					for(uint8_t i = 0; i < 2; i++) {
     5e4:	1f 82       	std	Y+7, r1	; 0x07
     5e6:	13 c1       	rjmp	.+550    	; 0x80e <__stack+0x3af>
						rgb_color color;
						if(i == 0) {
     5e8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ea:	88 23       	and	r24, r24
     5ec:	89 f4       	brne	.+34     	; 0x610 <__stack+0x1b1>
							color = (rgb_color){0, 25, 0};
     5ee:	ce 01       	movw	r24, r28
     5f0:	8d 5a       	subi	r24, 0xAD	; 173
     5f2:	9f 4f       	sbci	r25, 0xFF	; 255
     5f4:	fc 01       	movw	r30, r24
     5f6:	10 82       	st	Z, r1
     5f8:	ce 01       	movw	r24, r28
     5fa:	8d 5a       	subi	r24, 0xAD	; 173
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	29 e1       	ldi	r18, 0x19	; 25
     600:	fc 01       	movw	r30, r24
     602:	21 83       	std	Z+1, r18	; 0x01
     604:	ce 01       	movw	r24, r28
     606:	8d 5a       	subi	r24, 0xAD	; 173
     608:	9f 4f       	sbci	r25, 0xFF	; 255
     60a:	fc 01       	movw	r30, r24
     60c:	12 82       	std	Z+2, r1	; 0x02
     60e:	13 c0       	rjmp	.+38     	; 0x636 <__stack+0x1d7>
							} else if(i == 1) {
     610:	8f 81       	ldd	r24, Y+7	; 0x07
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	81 f4       	brne	.+32     	; 0x636 <__stack+0x1d7>
							color = (rgb_color){0, 0, 25};
     616:	ce 01       	movw	r24, r28
     618:	8d 5a       	subi	r24, 0xAD	; 173
     61a:	9f 4f       	sbci	r25, 0xFF	; 255
     61c:	fc 01       	movw	r30, r24
     61e:	10 82       	st	Z, r1
     620:	ce 01       	movw	r24, r28
     622:	8d 5a       	subi	r24, 0xAD	; 173
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	11 82       	std	Z+1, r1	; 0x01
     62a:	ce 01       	movw	r24, r28
     62c:	8d 5a       	subi	r24, 0xAD	; 173
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	29 e1       	ldi	r18, 0x19	; 25
     632:	fc 01       	movw	r30, r24
     634:	22 83       	std	Z+2, r18	; 0x02
						}
						uint8_t ledAmount = uart0_getc();
     636:	99 d3       	rcall	.+1842   	; 0xd6a <uart0_getc>
     638:	8c 87       	std	Y+12, r24	; 0x0c
						for(uint8_t l = 0 + (i*20); l < ledAmount + (i*20); l++)
     63a:	8f 81       	ldd	r24, Y+7	; 0x07
     63c:	88 0f       	add	r24, r24
     63e:	88 0f       	add	r24, r24
     640:	98 2f       	mov	r25, r24
     642:	99 0f       	add	r25, r25
     644:	99 0f       	add	r25, r25
     646:	89 0f       	add	r24, r25
     648:	88 87       	std	Y+8, r24	; 0x08
     64a:	19 c0       	rjmp	.+50     	; 0x67e <__stack+0x21f>
						{
							colors[l] = color;
     64c:	88 85       	ldd	r24, Y+8	; 0x08
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	c9 01       	movw	r24, r18
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	9c 01       	movw	r18, r24
     65e:	25 59       	subi	r18, 0x95	; 149
     660:	3e 4f       	sbci	r19, 0xFE	; 254
     662:	ce 01       	movw	r24, r28
     664:	8d 5a       	subi	r24, 0xAD	; 173
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	a2 81       	ldd	r26, Z+2	; 0x02
     670:	f9 01       	movw	r30, r18
     672:	80 83       	st	Z, r24
     674:	91 83       	std	Z+1, r25	; 0x01
     676:	a2 83       	std	Z+2, r26	; 0x02
							color = (rgb_color){0, 25, 0};
							} else if(i == 1) {
							color = (rgb_color){0, 0, 25};
						}
						uint8_t ledAmount = uart0_getc();
						for(uint8_t l = 0 + (i*20); l < ledAmount + (i*20); l++)
     678:	88 85       	ldd	r24, Y+8	; 0x08
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	88 87       	std	Y+8, r24	; 0x08
     67e:	88 85       	ldd	r24, Y+8	; 0x08
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	8c 85       	ldd	r24, Y+12	; 0x0c
     686:	48 2f       	mov	r20, r24
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	8f 81       	ldd	r24, Y+7	; 0x07
     68c:	68 2f       	mov	r22, r24
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	e4 e1       	ldi	r30, 0x14	; 20
     692:	e6 9f       	mul	r30, r22
     694:	c0 01       	movw	r24, r0
     696:	e7 9f       	mul	r30, r23
     698:	90 0d       	add	r25, r0
     69a:	11 24       	eor	r1, r1
     69c:	84 0f       	add	r24, r20
     69e:	95 1f       	adc	r25, r21
     6a0:	28 17       	cp	r18, r24
     6a2:	39 07       	cpc	r19, r25
     6a4:	9c f2       	brlt	.-90     	; 0x64c <__stack+0x1ed>
						{
							colors[l] = color;
						}
					
						for(uint8_t l = ledAmount + (i*20); l < ledAmount + 20 + (i*20); l++)
     6a6:	8f 81       	ldd	r24, Y+7	; 0x07
     6a8:	88 0f       	add	r24, r24
     6aa:	88 0f       	add	r24, r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	99 0f       	add	r25, r25
     6b0:	99 0f       	add	r25, r25
     6b2:	98 0f       	add	r25, r24
     6b4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6b6:	89 0f       	add	r24, r25
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	23 c0       	rjmp	.+70     	; 0x702 <__stack+0x2a3>
						{
							colors[l] = (rgb_color){4, 0, 0};
     6bc:	89 85       	ldd	r24, Y+9	; 0x09
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	9c 01       	movw	r18, r24
     6c4:	22 0f       	add	r18, r18
     6c6:	33 1f       	adc	r19, r19
     6c8:	28 0f       	add	r18, r24
     6ca:	39 1f       	adc	r19, r25
     6cc:	25 59       	subi	r18, 0x95	; 149
     6ce:	3e 4f       	sbci	r19, 0xFE	; 254
     6d0:	44 e0       	ldi	r20, 0x04	; 4
     6d2:	f9 01       	movw	r30, r18
     6d4:	40 83       	st	Z, r20
     6d6:	9c 01       	movw	r18, r24
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	28 0f       	add	r18, r24
     6de:	39 1f       	adc	r19, r25
     6e0:	24 59       	subi	r18, 0x94	; 148
     6e2:	3e 4f       	sbci	r19, 0xFE	; 254
     6e4:	f9 01       	movw	r30, r18
     6e6:	10 82       	st	Z, r1
     6e8:	9c 01       	movw	r18, r24
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	28 0f       	add	r18, r24
     6f0:	39 1f       	adc	r19, r25
     6f2:	c9 01       	movw	r24, r18
     6f4:	83 59       	subi	r24, 0x93	; 147
     6f6:	9e 4f       	sbci	r25, 0xFE	; 254
     6f8:	fc 01       	movw	r30, r24
     6fa:	10 82       	st	Z, r1
						for(uint8_t l = 0 + (i*20); l < ledAmount + (i*20); l++)
						{
							colors[l] = color;
						}
					
						for(uint8_t l = ledAmount + (i*20); l < ledAmount + 20 + (i*20); l++)
     6fc:	89 85       	ldd	r24, Y+9	; 0x09
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	89 87       	std	Y+9, r24	; 0x09
     702:	89 85       	ldd	r24, Y+9	; 0x09
     704:	28 2f       	mov	r18, r24
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	8c 85       	ldd	r24, Y+12	; 0x0c
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	ac 01       	movw	r20, r24
     710:	4c 5e       	subi	r20, 0xEC	; 236
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	68 2f       	mov	r22, r24
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	e4 e1       	ldi	r30, 0x14	; 20
     71c:	e6 9f       	mul	r30, r22
     71e:	c0 01       	movw	r24, r0
     720:	e7 9f       	mul	r30, r23
     722:	90 0d       	add	r25, r0
     724:	11 24       	eor	r1, r1
     726:	84 0f       	add	r24, r20
     728:	95 1f       	adc	r25, r21
     72a:	28 17       	cp	r18, r24
     72c:	39 07       	cpc	r19, r25
     72e:	34 f2       	brlt	.-116    	; 0x6bc <__stack+0x25d>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	a0 e2       	ldi	r26, 0x20	; 32
     736:	b1 e4       	ldi	r27, 0x41	; 65
     738:	89 a7       	std	Y+41, r24	; 0x29
     73a:	9a a7       	std	Y+42, r25	; 0x2a
     73c:	ab a7       	std	Y+43, r26	; 0x2b
     73e:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	4a e7       	ldi	r20, 0x7A	; 122
     746:	55 e4       	ldi	r21, 0x45	; 69
     748:	69 a5       	ldd	r22, Y+41	; 0x29
     74a:	7a a5       	ldd	r23, Y+42	; 0x2a
     74c:	8b a5       	ldd	r24, Y+43	; 0x2b
     74e:	9c a5       	ldd	r25, Y+44	; 0x2c
     750:	cf d4       	rcall	.+2462   	; 0x10f0 <__mulsf3>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	8d a7       	std	Y+45, r24	; 0x2d
     758:	9e a7       	std	Y+46, r25	; 0x2e
     75a:	af a7       	std	Y+47, r26	; 0x2f
     75c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	6d a5       	ldd	r22, Y+45	; 0x2d
     768:	7e a5       	ldd	r23, Y+46	; 0x2e
     76a:	8f a5       	ldd	r24, Y+47	; 0x2f
     76c:	98 a9       	ldd	r25, Y+48	; 0x30
     76e:	af d3       	rcall	.+1886   	; 0xece <__cmpsf2>
     770:	88 23       	and	r24, r24
     772:	2c f4       	brge	.+10     	; 0x77e <__stack+0x31f>
		__ticks = 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9a ab       	std	Y+50, r25	; 0x32
     77a:	89 ab       	std	Y+49, r24	; 0x31
     77c:	3b c0       	rjmp	.+118    	; 0x7f4 <__stack+0x395>
	else if (__tmp > 65535)
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	3f ef       	ldi	r19, 0xFF	; 255
     782:	4f e7       	ldi	r20, 0x7F	; 127
     784:	57 e4       	ldi	r21, 0x47	; 71
     786:	6d a5       	ldd	r22, Y+45	; 0x2d
     788:	7e a5       	ldd	r23, Y+46	; 0x2e
     78a:	8f a5       	ldd	r24, Y+47	; 0x2f
     78c:	98 a9       	ldd	r25, Y+48	; 0x30
     78e:	ac d4       	rcall	.+2392   	; 0x10e8 <__gesf2>
     790:	18 16       	cp	r1, r24
     792:	3c f5       	brge	.+78     	; 0x7e2 <__stack+0x383>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e2       	ldi	r20, 0x20	; 32
     79a:	51 e4       	ldi	r21, 0x41	; 65
     79c:	69 a5       	ldd	r22, Y+41	; 0x29
     79e:	7a a5       	ldd	r23, Y+42	; 0x2a
     7a0:	8b a5       	ldd	r24, Y+43	; 0x2b
     7a2:	9c a5       	ldd	r25, Y+44	; 0x2c
     7a4:	a5 d4       	rcall	.+2378   	; 0x10f0 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	bc 01       	movw	r22, r24
     7ac:	cd 01       	movw	r24, r26
     7ae:	fb d3       	rcall	.+2038   	; 0xfa6 <__fixunssfsi>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	9a ab       	std	Y+50, r25	; 0x32
     7b6:	89 ab       	std	Y+49, r24	; 0x31
     7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <__stack+0x379>
     7ba:	80 e9       	ldi	r24, 0x90	; 144
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9c ab       	std	Y+52, r25	; 0x34
     7c0:	8b ab       	std	Y+51, r24	; 0x33
     7c2:	8b a9       	ldd	r24, Y+51	; 0x33
     7c4:	9c a9       	ldd	r25, Y+52	; 0x34
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <__stack+0x367>
     7ca:	9c ab       	std	Y+52, r25	; 0x34
     7cc:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ce:	89 a9       	ldd	r24, Y+49	; 0x31
     7d0:	9a a9       	ldd	r25, Y+50	; 0x32
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	9a ab       	std	Y+50, r25	; 0x32
     7d6:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d8:	89 a9       	ldd	r24, Y+49	; 0x31
     7da:	9a a9       	ldd	r25, Y+50	; 0x32
     7dc:	89 2b       	or	r24, r25
     7de:	69 f7       	brne	.-38     	; 0x7ba <__stack+0x35b>
     7e0:	13 c0       	rjmp	.+38     	; 0x808 <__stack+0x3a9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e2:	6d a5       	ldd	r22, Y+45	; 0x2d
     7e4:	7e a5       	ldd	r23, Y+46	; 0x2e
     7e6:	8f a5       	ldd	r24, Y+47	; 0x2f
     7e8:	98 a9       	ldd	r25, Y+48	; 0x30
     7ea:	dd d3       	rcall	.+1978   	; 0xfa6 <__fixunssfsi>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	9a ab       	std	Y+50, r25	; 0x32
     7f2:	89 ab       	std	Y+49, r24	; 0x31
     7f4:	89 a9       	ldd	r24, Y+49	; 0x31
     7f6:	9a a9       	ldd	r25, Y+50	; 0x32
     7f8:	9e ab       	std	Y+54, r25	; 0x36
     7fa:	8d ab       	std	Y+53, r24	; 0x35
     7fc:	8d a9       	ldd	r24, Y+53	; 0x35
     7fe:	9e a9       	ldd	r25, Y+54	; 0x36
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <__stack+0x3a1>
     804:	9e ab       	std	Y+54, r25	; 0x36
     806:	8d ab       	std	Y+53, r24	; 0x35
					}
					break;
				}
				case LED_MODE_STATUS:
				{
					for(uint8_t i = 0; i < 2; i++) {
     808:	8f 81       	ldd	r24, Y+7	; 0x07
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	8f 83       	std	Y+7, r24	; 0x07
     80e:	8f 81       	ldd	r24, Y+7	; 0x07
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	08 f4       	brcc	.+2      	; 0x816 <__stack+0x3b7>
     814:	e9 ce       	rjmp	.-558    	; 0x5e8 <__stack+0x189>
						{
							colors[l] = (rgb_color){4, 0, 0};
						}
						_delay_ms(10);
					}
					break;
     816:	03 c0       	rjmp	.+6      	; 0x81e <__stack+0x3bf>
				}
				case LED_MODE_VICTORY:
				{
					victory = uart0_getc();
     818:	a8 d2       	rcall	.+1360   	; 0xd6a <uart0_getc>
     81a:	8b 83       	std	Y+3, r24	; 0x03
					
					break;
     81c:	00 00       	nop
				}
				default:
					break;
			}
			
			updated = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	8d 83       	std	Y+5, r24	; 0x05
	
	while(1)
	{		
		PORTD |= (1<<7);
		uint8_t updated = 0;
		while(uart0_available() > 0) {
     822:	31 d3       	rcall	.+1634   	; 0xe86 <uart0_available>
     824:	89 2b       	or	r24, r25
     826:	09 f0       	breq	.+2      	; 0x82a <__stack+0x3cb>
     828:	37 ce       	rjmp	.-914    	; 0x498 <__stack+0x39>
			}
			
			updated = 1;
		}
		
		if(victory)
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <__stack+0x3d3>
     830:	e4 c0       	rjmp	.+456    	; 0x9fa <__stack+0x59b>
		{
			for(uint8_t l = 0; l < 40; l++)
     832:	1a 86       	std	Y+10, r1	; 0x0a
     834:	23 c0       	rjmp	.+70     	; 0x87c <__stack+0x41d>
			{
				colors[l] = (rgb_color){0, timer, 0};
     836:	8a 85       	ldd	r24, Y+10	; 0x0a
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9c 01       	movw	r18, r24
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	28 0f       	add	r18, r24
     844:	39 1f       	adc	r19, r25
     846:	25 59       	subi	r18, 0x95	; 149
     848:	3e 4f       	sbci	r19, 0xFE	; 254
     84a:	f9 01       	movw	r30, r18
     84c:	10 82       	st	Z, r1
     84e:	9c 01       	movw	r18, r24
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	28 0f       	add	r18, r24
     856:	39 1f       	adc	r19, r25
     858:	24 59       	subi	r18, 0x94	; 148
     85a:	3e 4f       	sbci	r19, 0xFE	; 254
     85c:	49 81       	ldd	r20, Y+1	; 0x01
     85e:	f9 01       	movw	r30, r18
     860:	40 83       	st	Z, r20
     862:	9c 01       	movw	r18, r24
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
     868:	28 0f       	add	r18, r24
     86a:	39 1f       	adc	r19, r25
     86c:	c9 01       	movw	r24, r18
     86e:	83 59       	subi	r24, 0x93	; 147
     870:	9e 4f       	sbci	r25, 0xFE	; 254
     872:	fc 01       	movw	r30, r24
     874:	10 82       	st	Z, r1
			updated = 1;
		}
		
		if(victory)
		{
			for(uint8_t l = 0; l < 40; l++)
     876:	8a 85       	ldd	r24, Y+10	; 0x0a
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	8a 87       	std	Y+10, r24	; 0x0a
     87c:	8a 85       	ldd	r24, Y+10	; 0x0a
     87e:	88 32       	cpi	r24, 0x28	; 40
     880:	d0 f2       	brcs	.-76     	; 0x836 <__stack+0x3d7>
			{
				colors[l] = (rgb_color){0, timer, 0};
			}
			timer += incr;
     882:	99 81       	ldd	r25, Y+1	; 0x01
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	89 0f       	add	r24, r25
     888:	89 83       	std	Y+1, r24	; 0x01
			if (timer % 60 == 0)
     88a:	99 81       	ldd	r25, Y+1	; 0x01
     88c:	89 e8       	ldi	r24, 0x89	; 137
     88e:	98 9f       	mul	r25, r24
     890:	81 2d       	mov	r24, r1
     892:	11 24       	eor	r1, r1
     894:	82 95       	swap	r24
     896:	86 95       	lsr	r24
     898:	87 70       	andi	r24, 0x07	; 7
     89a:	2c e3       	ldi	r18, 0x3C	; 60
     89c:	82 9f       	mul	r24, r18
     89e:	80 2d       	mov	r24, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	f9 2f       	mov	r31, r25
     8a4:	f8 1b       	sub	r31, r24
     8a6:	8f 2f       	mov	r24, r31
     8a8:	88 23       	and	r24, r24
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__stack+0x453>
				incr *= -1;
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
     8ae:	81 95       	neg	r24
     8b0:	8a 83       	std	Y+2, r24	; 0x02
			led_strip_write(colors, LED_COUNT);
     8b2:	6c e3       	ldi	r22, 0x3C	; 60
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	8b e6       	ldi	r24, 0x6B	; 107
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	d1 db       	rcall	.-2142   	; 0x5e <led_strip_write>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a0 ea       	ldi	r26, 0xA0	; 160
     8c2:	b1 e4       	ldi	r27, 0x41	; 65
     8c4:	8f ab       	std	Y+55, r24	; 0x37
     8c6:	98 af       	std	Y+56, r25	; 0x38
     8c8:	a9 af       	std	Y+57, r26	; 0x39
     8ca:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4a e7       	ldi	r20, 0x7A	; 122
     8d2:	55 e4       	ldi	r21, 0x45	; 69
     8d4:	6f a9       	ldd	r22, Y+55	; 0x37
     8d6:	78 ad       	ldd	r23, Y+56	; 0x38
     8d8:	89 ad       	ldd	r24, Y+57	; 0x39
     8da:	9a ad       	ldd	r25, Y+58	; 0x3a
     8dc:	09 d4       	rcall	.+2066   	; 0x10f0 <__mulsf3>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	8b af       	std	Y+59, r24	; 0x3b
     8e4:	9c af       	std	Y+60, r25	; 0x3c
     8e6:	ad af       	std	Y+61, r26	; 0x3d
     8e8:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e8       	ldi	r20, 0x80	; 128
     8f0:	5f e3       	ldi	r21, 0x3F	; 63
     8f2:	6b ad       	ldd	r22, Y+59	; 0x3b
     8f4:	7c ad       	ldd	r23, Y+60	; 0x3c
     8f6:	8d ad       	ldd	r24, Y+61	; 0x3d
     8f8:	9e ad       	ldd	r25, Y+62	; 0x3e
     8fa:	e9 d2       	rcall	.+1490   	; 0xece <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	44 f4       	brge	.+16     	; 0x910 <__stack+0x4b1>
		__ticks = 1;
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	ce 01       	movw	r24, r28
     906:	cf 96       	adiw	r24, 0x3f	; 63
     908:	fc 01       	movw	r30, r24
     90a:	31 83       	std	Z+1, r19	; 0x01
     90c:	20 83       	st	Z, r18
     90e:	5b c0       	rjmp	.+182    	; 0x9c6 <__stack+0x567>
	else if (__tmp > 65535)
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	57 e4       	ldi	r21, 0x47	; 71
     918:	6b ad       	ldd	r22, Y+59	; 0x3b
     91a:	7c ad       	ldd	r23, Y+60	; 0x3c
     91c:	8d ad       	ldd	r24, Y+61	; 0x3d
     91e:	9e ad       	ldd	r25, Y+62	; 0x3e
     920:	e3 d3       	rcall	.+1990   	; 0x10e8 <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	0c f0       	brlt	.+2      	; 0x928 <__stack+0x4c9>
     926:	42 c0       	rjmp	.+132    	; 0x9ac <__stack+0x54d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e2       	ldi	r20, 0x20	; 32
     92e:	51 e4       	ldi	r21, 0x41	; 65
     930:	6f a9       	ldd	r22, Y+55	; 0x37
     932:	78 ad       	ldd	r23, Y+56	; 0x38
     934:	89 ad       	ldd	r24, Y+57	; 0x39
     936:	9a ad       	ldd	r25, Y+58	; 0x3a
     938:	db d3       	rcall	.+1974   	; 0x10f0 <__mulsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	31 d3       	rcall	.+1634   	; 0xfa6 <__fixunssfsi>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	9e 01       	movw	r18, r28
     94a:	21 5c       	subi	r18, 0xC1	; 193
     94c:	3f 4f       	sbci	r19, 0xFF	; 255
     94e:	f9 01       	movw	r30, r18
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
     954:	23 c0       	rjmp	.+70     	; 0x99c <__stack+0x53d>
     956:	ce 01       	movw	r24, r28
     958:	8f 5b       	subi	r24, 0xBF	; 191
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	20 e9       	ldi	r18, 0x90	; 144
     95e:	31 e0       	ldi	r19, 0x01	; 1
     960:	fc 01       	movw	r30, r24
     962:	31 83       	std	Z+1, r19	; 0x01
     964:	20 83       	st	Z, r18
     966:	ce 01       	movw	r24, r28
     968:	8f 5b       	subi	r24, 0xBF	; 191
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	fc 01       	movw	r30, r24
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <__stack+0x513>
     976:	9e 01       	movw	r18, r28
     978:	2f 5b       	subi	r18, 0xBF	; 191
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	f9 01       	movw	r30, r18
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     982:	ce 01       	movw	r24, r28
     984:	cf 96       	adiw	r24, 0x3f	; 63
     986:	fc 01       	movw	r30, r24
     988:	80 81       	ld	r24, Z
     98a:	91 81       	ldd	r25, Z+1	; 0x01
     98c:	9c 01       	movw	r18, r24
     98e:	21 50       	subi	r18, 0x01	; 1
     990:	31 09       	sbc	r19, r1
     992:	ce 01       	movw	r24, r28
     994:	cf 96       	adiw	r24, 0x3f	; 63
     996:	fc 01       	movw	r30, r24
     998:	31 83       	std	Z+1, r19	; 0x01
     99a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99c:	ce 01       	movw	r24, r28
     99e:	cf 96       	adiw	r24, 0x3f	; 63
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	89 2b       	or	r24, r25
     9a8:	b1 f6       	brne	.-84     	; 0x956 <__stack+0x4f7>
     9aa:	27 c0       	rjmp	.+78     	; 0x9fa <__stack+0x59b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ac:	6b ad       	ldd	r22, Y+59	; 0x3b
     9ae:	7c ad       	ldd	r23, Y+60	; 0x3c
     9b0:	8d ad       	ldd	r24, Y+61	; 0x3d
     9b2:	9e ad       	ldd	r25, Y+62	; 0x3e
     9b4:	f8 d2       	rcall	.+1520   	; 0xfa6 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9e 01       	movw	r18, r28
     9bc:	21 5c       	subi	r18, 0xC1	; 193
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	f9 01       	movw	r30, r18
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	80 83       	st	Z, r24
     9c6:	ce 01       	movw	r24, r28
     9c8:	8d 5b       	subi	r24, 0xBD	; 189
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	9e 01       	movw	r18, r28
     9ce:	21 5c       	subi	r18, 0xC1	; 193
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	31 81       	ldd	r19, Z+1	; 0x01
     9d8:	fc 01       	movw	r30, r24
     9da:	31 83       	std	Z+1, r19	; 0x01
     9dc:	20 83       	st	Z, r18
     9de:	ce 01       	movw	r24, r28
     9e0:	8d 5b       	subi	r24, 0xBD	; 189
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	fc 01       	movw	r30, r24
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <__stack+0x58b>
     9ee:	9e 01       	movw	r18, r28
     9f0:	2d 5b       	subi	r18, 0xBD	; 189
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	f9 01       	movw	r30, r18
     9f6:	91 83       	std	Z+1, r25	; 0x01
     9f8:	80 83       	st	Z, r24
			_delay_ms(20);
		}
		
		if(updated && !victory) {
     9fa:	8d 81       	ldd	r24, Y+5	; 0x05
     9fc:	88 23       	and	r24, r24
     9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x5a3>
     a00:	cb c0       	rjmp	.+406    	; 0xb98 <__stack+0x739>
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	88 23       	and	r24, r24
     a06:	09 f0       	breq	.+2      	; 0xa0a <__stack+0x5ab>
     a08:	c7 c0       	rjmp	.+398    	; 0xb98 <__stack+0x739>
			led_strip_write(colors, LED_COUNT);
     a0a:	6c e3       	ldi	r22, 0x3C	; 60
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	8b e6       	ldi	r24, 0x6B	; 107
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	25 db       	rcall	.-2486   	; 0x5e <led_strip_write>
     a14:	9e 01       	movw	r18, r28
     a16:	2b 5b       	subi	r18, 0xBB	; 187
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 ea       	ldi	r26, 0xA0	; 160
     a20:	b1 e4       	ldi	r27, 0x41	; 65
     a22:	f9 01       	movw	r30, r18
     a24:	80 83       	st	Z, r24
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	a2 83       	std	Z+2, r26	; 0x02
     a2a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a2c:	8e 01       	movw	r16, r28
     a2e:	07 5b       	subi	r16, 0xB7	; 183
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	ce 01       	movw	r24, r28
     a34:	8b 5b       	subi	r24, 0xBB	; 187
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	4a e7       	ldi	r20, 0x7A	; 122
     a3e:	55 e4       	ldi	r21, 0x45	; 69
     a40:	fc 01       	movw	r30, r24
     a42:	60 81       	ld	r22, Z
     a44:	71 81       	ldd	r23, Z+1	; 0x01
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	93 81       	ldd	r25, Z+3	; 0x03
     a4a:	52 d3       	rcall	.+1700   	; 0x10f0 <__mulsf3>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	f8 01       	movw	r30, r16
     a52:	80 83       	st	Z, r24
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	a2 83       	std	Z+2, r26	; 0x02
     a58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a5a:	ce 01       	movw	r24, r28
     a5c:	87 5b       	subi	r24, 0xB7	; 183
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e8       	ldi	r20, 0x80	; 128
     a66:	5f e3       	ldi	r21, 0x3F	; 63
     a68:	fc 01       	movw	r30, r24
     a6a:	60 81       	ld	r22, Z
     a6c:	71 81       	ldd	r23, Z+1	; 0x01
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	2d d2       	rcall	.+1114   	; 0xece <__cmpsf2>
     a74:	88 23       	and	r24, r24
     a76:	4c f4       	brge	.+18     	; 0xa8a <__stack+0x62b>
		__ticks = 1;
     a78:	ce 01       	movw	r24, r28
     a7a:	83 5b       	subi	r24, 0xB3	; 179
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	31 83       	std	Z+1, r19	; 0x01
     a86:	20 83       	st	Z, r18
     a88:	69 c0       	rjmp	.+210    	; 0xb5c <__stack+0x6fd>
	else if (__tmp > 65535)
     a8a:	ce 01       	movw	r24, r28
     a8c:	87 5b       	subi	r24, 0xB7	; 183
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	3f ef       	ldi	r19, 0xFF	; 255
     a94:	4f e7       	ldi	r20, 0x7F	; 127
     a96:	57 e4       	ldi	r21, 0x47	; 71
     a98:	fc 01       	movw	r30, r24
     a9a:	60 81       	ld	r22, Z
     a9c:	71 81       	ldd	r23, Z+1	; 0x01
     a9e:	82 81       	ldd	r24, Z+2	; 0x02
     aa0:	93 81       	ldd	r25, Z+3	; 0x03
     aa2:	22 d3       	rcall	.+1604   	; 0x10e8 <__gesf2>
     aa4:	18 16       	cp	r1, r24
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__stack+0x64b>
     aa8:	48 c0       	rjmp	.+144    	; 0xb3a <__stack+0x6db>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aaa:	ce 01       	movw	r24, r28
     aac:	8b 5b       	subi	r24, 0xBB	; 187
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e2       	ldi	r20, 0x20	; 32
     ab6:	51 e4       	ldi	r21, 0x41	; 65
     ab8:	fc 01       	movw	r30, r24
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	16 d3       	rcall	.+1580   	; 0x10f0 <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8e 01       	movw	r16, r28
     aca:	03 5b       	subi	r16, 0xB3	; 179
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	bc 01       	movw	r22, r24
     ad0:	cd 01       	movw	r24, r26
     ad2:	69 d2       	rcall	.+1234   	; 0xfa6 <__fixunssfsi>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	f8 01       	movw	r30, r16
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
     ade:	24 c0       	rjmp	.+72     	; 0xb28 <__stack+0x6c9>
     ae0:	ce 01       	movw	r24, r28
     ae2:	81 5b       	subi	r24, 0xB1	; 177
     ae4:	9f 4f       	sbci	r25, 0xFF	; 255
     ae6:	20 e9       	ldi	r18, 0x90	; 144
     ae8:	31 e0       	ldi	r19, 0x01	; 1
     aea:	fc 01       	movw	r30, r24
     aec:	31 83       	std	Z+1, r19	; 0x01
     aee:	20 83       	st	Z, r18
     af0:	ce 01       	movw	r24, r28
     af2:	81 5b       	subi	r24, 0xB1	; 177
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <__stack+0x69d>
     b00:	9e 01       	movw	r18, r28
     b02:	21 5b       	subi	r18, 0xB1	; 177
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	f9 01       	movw	r30, r18
     b08:	91 83       	std	Z+1, r25	; 0x01
     b0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b0c:	ce 01       	movw	r24, r28
     b0e:	83 5b       	subi	r24, 0xB3	; 179
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	9e 01       	movw	r18, r28
     b14:	23 5b       	subi	r18, 0xB3	; 179
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	f9 01       	movw	r30, r18
     b1a:	20 81       	ld	r18, Z
     b1c:	31 81       	ldd	r19, Z+1	; 0x01
     b1e:	21 50       	subi	r18, 0x01	; 1
     b20:	31 09       	sbc	r19, r1
     b22:	fc 01       	movw	r30, r24
     b24:	31 83       	std	Z+1, r19	; 0x01
     b26:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b28:	ce 01       	movw	r24, r28
     b2a:	83 5b       	subi	r24, 0xB3	; 179
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	fc 01       	movw	r30, r24
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	89 2b       	or	r24, r25
     b36:	a1 f6       	brne	.-88     	; 0xae0 <__stack+0x681>
     b38:	2b c0       	rjmp	.+86     	; 0xb90 <__stack+0x731>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b3a:	8e 01       	movw	r16, r28
     b3c:	03 5b       	subi	r16, 0xB3	; 179
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
     b40:	ce 01       	movw	r24, r28
     b42:	87 5b       	subi	r24, 0xB7	; 183
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	fc 01       	movw	r30, r24
     b48:	60 81       	ld	r22, Z
     b4a:	71 81       	ldd	r23, Z+1	; 0x01
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	2a d2       	rcall	.+1108   	; 0xfa6 <__fixunssfsi>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	f8 01       	movw	r30, r16
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
     b5c:	ce 01       	movw	r24, r28
     b5e:	8f 5a       	subi	r24, 0xAF	; 175
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	9e 01       	movw	r18, r28
     b64:	23 5b       	subi	r18, 0xB3	; 179
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	31 81       	ldd	r19, Z+1	; 0x01
     b6e:	fc 01       	movw	r30, r24
     b70:	31 83       	std	Z+1, r19	; 0x01
     b72:	20 83       	st	Z, r18
     b74:	ce 01       	movw	r24, r28
     b76:	8f 5a       	subi	r24, 0xAF	; 175
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <__stack+0x721>
     b84:	9e 01       	movw	r18, r28
     b86:	2f 5a       	subi	r18, 0xAF	; 175
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	f9 01       	movw	r30, r18
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
			_delay_ms(20);
			uart0_puts("r");
     b90:	80 e6       	ldi	r24, 0x60	; 96
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	5b d1       	rcall	.+694    	; 0xe4c <uart0_puts>
			updated = 0;
     b96:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
     b98:	74 cc       	rjmp	.-1816   	; 0x482 <__stack+0x23>

00000b9a <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	00 90 5f 00 	lds	r0, 0x005F
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	ef 93       	push	r30
     bb0:	ff 93       	push	r31
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	25 97       	sbiw	r28, 0x05	; 5
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	cd bf       	out	0x3d, r28	; 61
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     bc0:	8b e2       	ldi	r24, 0x2B	; 43
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     bca:	8c e2       	ldi	r24, 0x2C	; 44
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	88 71       	andi	r24, 0x18	; 24
     bd8:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
     bda:	80 91 66 01 	lds	r24, 0x0166
     bde:	90 91 67 01 	lds	r25, 0x0167
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	8f 77       	andi	r24, 0x7F	; 127
     be6:	99 27       	eor	r25, r25
     be8:	9d 83       	std	Y+5, r25	; 0x05
     bea:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
     bec:	80 91 68 01 	lds	r24, 0x0168
     bf0:	90 91 69 01 	lds	r25, 0x0169
     bf4:	2c 81       	ldd	r18, Y+4	; 0x04
     bf6:	3d 81       	ldd	r19, Y+5	; 0x05
     bf8:	28 17       	cp	r18, r24
     bfa:	39 07       	cpc	r19, r25
     bfc:	19 f4       	brne	.+6      	; 0xc04 <__vector_11+0x6a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	0d c0       	rjmp	.+26     	; 0xc1e <__vector_11+0x84>
    } else {
        /* store new index */
        UART_RxHead = tmphead;
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	9d 81       	ldd	r25, Y+5	; 0x05
     c08:	90 93 67 01 	sts	0x0167, r25
     c0c:	80 93 66 01 	sts	0x0166, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	9d 81       	ldd	r25, Y+5	; 0x05
     c14:	8e 51       	subi	r24, 0x1E	; 30
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	2b 81       	ldd	r18, Y+3	; 0x03
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	80 93 6a 01 	sts	0x016A, r24
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	3f 91       	pop	r19
     c3c:	2f 91       	pop	r18
     c3e:	0f 90       	pop	r0
     c40:	00 92 5f 00 	sts	0x005F, r0
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	00 90 5f 00 	lds	r0, 0x005F
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	00 d0       	rcall	.+0      	; 0xc68 <__vector_12+0x1e>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
     c6c:	20 91 62 01 	lds	r18, 0x0162
     c70:	30 91 63 01 	lds	r19, 0x0163
     c74:	80 91 64 01 	lds	r24, 0x0164
     c78:	90 91 65 01 	lds	r25, 0x0165
     c7c:	28 17       	cp	r18, r24
     c7e:	39 07       	cpc	r19, r25
     c80:	d1 f0       	breq	.+52     	; 0xcb6 <__vector_12+0x6c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
     c82:	80 91 64 01 	lds	r24, 0x0164
     c86:	90 91 65 01 	lds	r25, 0x0165
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	8f 77       	andi	r24, 0x7F	; 127
     c8e:	99 27       	eor	r25, r25
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	90 93 65 01 	sts	0x0165, r25
     c9c:	80 93 64 01 	sts	0x0164, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     ca0:	8c e2       	ldi	r24, 0x2C	; 44
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	29 81       	ldd	r18, Y+1	; 0x01
     ca6:	3a 81       	ldd	r19, Y+2	; 0x02
     ca8:	2e 59       	subi	r18, 0x9E	; 158
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	f9 01       	movw	r30, r18
     cae:	20 81       	ld	r18, Z
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__vector_12+0x7e>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     cb6:	8a e2       	ldi	r24, 0x2A	; 42
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	2a e2       	ldi	r18, 0x2A	; 42
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	2f 7d       	andi	r18, 0xDF	; 223
     cc4:	fc 01       	movw	r30, r24
     cc6:	20 83       	st	Z, r18
    }
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	00 92 5f 00 	sts	0x005F, r0
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <uart0_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(uint16_t baudrate)
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	00 d0       	rcall	.+0      	; 0xcee <uart0_init+0x6>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
	UART_TxHead = 0;
     cf6:	10 92 63 01 	sts	0x0163, r1
     cfa:	10 92 62 01 	sts	0x0162, r1
	UART_TxTail = 0;
     cfe:	10 92 65 01 	sts	0x0165, r1
     d02:	10 92 64 01 	sts	0x0164, r1
	UART_RxHead = 0;
     d06:	10 92 67 01 	sts	0x0167, r1
     d0a:	10 92 66 01 	sts	0x0166, r1
	UART_RxTail = 0;
     d0e:	10 92 69 01 	sts	0x0169, r1
     d12:	10 92 68 01 	sts	0x0168, r1
	/* enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if ( baudrate & 0x8000 ) {
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	99 23       	and	r25, r25
     d1c:	54 f4       	brge	.+20     	; 0xd32 <uart0_init+0x4a>
		UART0_STATUS = (1<<U2X);  //Enable 2x speed
     d1e:	8b e2       	ldi	r24, 0x2B	; 43
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	22 e0       	ldi	r18, 0x02	; 2
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
		baudrate &= ~0x8000;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH = (uint8_t)(baudrate>>8);
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	29 81       	ldd	r18, Y+1	; 0x01
     d38:	3a 81       	ldd	r19, Y+2	; 0x02
     d3a:	23 2f       	mov	r18, r19
     d3c:	33 27       	eor	r19, r19
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
	UBRRL = (uint8_t) baudrate;
     d42:	89 e2       	ldi	r24, 0x29	; 41
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	29 81       	ldd	r18, Y+1	; 0x01
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
     d4c:	8a e2       	ldi	r24, 0x2A	; 42
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	28 e9       	ldi	r18, 0x98	; 152
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     d56:	80 e4       	ldi	r24, 0x40	; 64
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	26 e8       	ldi	r18, 0x86	; 134
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
	/* Enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

} /* uart0_init */
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <uart0_getc>:
Purpose:  return byte from ringbuffer
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
uint16_t uart0_getc(void)
{
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <uart0_getc+0x6>
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	uint16_t tmptail;
	uint8_t data;

	if ( UART_RxHead == UART_RxTail ) {
     d76:	20 91 66 01 	lds	r18, 0x0166
     d7a:	30 91 67 01 	lds	r19, 0x0167
     d7e:	80 91 68 01 	lds	r24, 0x0168
     d82:	90 91 69 01 	lds	r25, 0x0169
     d86:	28 17       	cp	r18, r24
     d88:	39 07       	cpc	r19, r25
     d8a:	19 f4       	brne	.+6      	; 0xd92 <uart0_getc+0x28>
		return UART_NO_DATA;   /* no data available */
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	21 c0       	rjmp	.+66     	; 0xdd4 <uart0_getc+0x6a>
	}

	/* calculate /store buffer index */
	tmptail = (UART_RxTail + 1) & UART_RX0_BUFFER_MASK;
     d92:	80 91 68 01 	lds	r24, 0x0168
     d96:	90 91 69 01 	lds	r25, 0x0169
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	99 27       	eor	r25, r25
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
	UART_RxTail = tmptail;
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	90 93 69 01 	sts	0x0169, r25
     dac:	80 93 68 01 	sts	0x0168, r24

	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	8e 51       	subi	r24, 0x1E	; 30
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	8b 83       	std	Y+3, r24	; 0x03

	return (UART_LastRxError << 8) + data;
     dbe:	80 91 6a 01 	lds	r24, 0x016A
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	38 2f       	mov	r19, r24
     dc8:	22 27       	eor	r18, r18
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19

} /* uart0_getc */
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <uart0_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart0_putc(uint8_t data)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	00 d0       	rcall	.+0      	; 0xde6 <uart0_putc+0x6>
     de6:	1f 92       	push	r1
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
     dee:	80 91 62 01 	lds	r24, 0x0162
     df2:	90 91 63 01 	lds	r25, 0x0163
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	8f 77       	andi	r24, 0x7F	; 127
     dfa:	99 27       	eor	r25, r25
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01

	while ( tmphead == UART_TxTail ) {
     e00:	00 00       	nop
     e02:	80 91 64 01 	lds	r24, 0x0164
     e06:	90 91 65 01 	lds	r25, 0x0165
     e0a:	29 81       	ldd	r18, Y+1	; 0x01
     e0c:	3a 81       	ldd	r19, Y+2	; 0x02
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	b9 f3       	breq	.-18     	; 0xe02 <uart0_putc+0x22>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	8e 59       	subi	r24, 0x9E	; 158
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	2b 81       	ldd	r18, Y+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
	UART_TxHead = tmphead;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	90 93 63 01 	sts	0x0163, r25
     e2a:	80 93 62 01 	sts	0x0162, r24

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
     e2e:	8a e2       	ldi	r24, 0x2A	; 42
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	2a e2       	ldi	r18, 0x2A	; 42
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	f9 01       	movw	r30, r18
     e38:	20 81       	ld	r18, Z
     e3a:	20 62       	ori	r18, 0x20	; 32
     e3c:	fc 01       	movw	r30, r24
     e3e:	20 83       	st	Z, r18

} /* uart0_putc */
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	00 d0       	rcall	.+0      	; 0xe52 <uart0_puts+0x6>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
	while (*s) {
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <uart0_puts+0x24>
		uart0_putc(*s++);
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	9c 01       	movw	r18, r24
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	3a 83       	std	Y+2, r19	; 0x02
     e68:	29 83       	std	Y+1, r18	; 0x01
     e6a:	fc 01       	movw	r30, r24
     e6c:	80 81       	ld	r24, Z
     e6e:	b8 df       	rcall	.-144    	; 0xde0 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	88 23       	and	r24, r24
     e7a:	81 f7       	brne	.-32     	; 0xe5c <uart0_puts+0x10>
		uart0_putc(*s++);
	}

} /* uart0_puts */
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <uart0_available>:
Purpose:  Determine the number of bytes waiting in the receive buffer
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
uint16_t uart0_available(void)
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	return (UART_RX0_BUFFER_SIZE + UART_RxHead - UART_RxTail) & UART_RX0_BUFFER_MASK;
     e8e:	20 91 66 01 	lds	r18, 0x0166
     e92:	30 91 67 01 	lds	r19, 0x0167
     e96:	80 91 68 01 	lds	r24, 0x0168
     e9a:	90 91 69 01 	lds	r25, 0x0169
     e9e:	a9 01       	movw	r20, r18
     ea0:	48 1b       	sub	r20, r24
     ea2:	59 0b       	sbc	r21, r25
     ea4:	ca 01       	movw	r24, r20
     ea6:	8f 77       	andi	r24, 0x7F	; 127
     ea8:	99 27       	eor	r25, r25
} /* uart0_available */
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <uart0_flush>:
Purpose:  Flush bytes waiting the receive buffer.  Acutally ignores them.
Input:    None
Returns:  None
**************************************************************************/
void uart0_flush(void)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	UART_RxHead = UART_RxTail;
     eb8:	80 91 68 01 	lds	r24, 0x0168
     ebc:	90 91 69 01 	lds	r25, 0x0169
     ec0:	90 93 67 01 	sts	0x0167, r25
     ec4:	80 93 66 01 	sts	0x0166, r24
} /* uart0_flush */
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <__cmpsf2>:
     ece:	97 d0       	rcall	.+302    	; 0xffe <__fp_cmp>
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <__cmpsf2+0x6>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret

00000ed6 <__divsf3>:
     ed6:	0c d0       	rcall	.+24     	; 0xef0 <__divsf3x>
     ed8:	cd c0       	rjmp	.+410    	; 0x1074 <__fp_round>
     eda:	c5 d0       	rcall	.+394    	; 0x1066 <__fp_pscB>
     edc:	40 f0       	brcs	.+16     	; 0xeee <__divsf3+0x18>
     ede:	bc d0       	rcall	.+376    	; 0x1058 <__fp_pscA>
     ee0:	30 f0       	brcs	.+12     	; 0xeee <__divsf3+0x18>
     ee2:	21 f4       	brne	.+8      	; 0xeec <__divsf3+0x16>
     ee4:	5f 3f       	cpi	r21, 0xFF	; 255
     ee6:	19 f0       	breq	.+6      	; 0xeee <__divsf3+0x18>
     ee8:	ae c0       	rjmp	.+348    	; 0x1046 <__fp_inf>
     eea:	51 11       	cpse	r21, r1
     eec:	f7 c0       	rjmp	.+494    	; 0x10dc <__fp_szero>
     eee:	b1 c0       	rjmp	.+354    	; 0x1052 <__fp_nan>

00000ef0 <__divsf3x>:
     ef0:	d2 d0       	rcall	.+420    	; 0x1096 <__fp_split3>
     ef2:	98 f3       	brcs	.-26     	; 0xeda <__divsf3+0x4>

00000ef4 <__divsf3_pse>:
     ef4:	99 23       	and	r25, r25
     ef6:	c9 f3       	breq	.-14     	; 0xeea <__divsf3+0x14>
     ef8:	55 23       	and	r21, r21
     efa:	b1 f3       	breq	.-20     	; 0xee8 <__divsf3+0x12>
     efc:	95 1b       	sub	r25, r21
     efe:	55 0b       	sbc	r21, r21
     f00:	bb 27       	eor	r27, r27
     f02:	aa 27       	eor	r26, r26
     f04:	62 17       	cp	r22, r18
     f06:	73 07       	cpc	r23, r19
     f08:	84 07       	cpc	r24, r20
     f0a:	38 f0       	brcs	.+14     	; 0xf1a <__divsf3_pse+0x26>
     f0c:	9f 5f       	subi	r25, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	44 1f       	adc	r20, r20
     f16:	aa 1f       	adc	r26, r26
     f18:	a9 f3       	breq	.-22     	; 0xf04 <__divsf3_pse+0x10>
     f1a:	33 d0       	rcall	.+102    	; 0xf82 <__divsf3_pse+0x8e>
     f1c:	0e 2e       	mov	r0, r30
     f1e:	3a f0       	brmi	.+14     	; 0xf2e <__divsf3_pse+0x3a>
     f20:	e0 e8       	ldi	r30, 0x80	; 128
     f22:	30 d0       	rcall	.+96     	; 0xf84 <__divsf3_pse+0x90>
     f24:	91 50       	subi	r25, 0x01	; 1
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	e6 95       	lsr	r30
     f2a:	00 1c       	adc	r0, r0
     f2c:	ca f7       	brpl	.-14     	; 0xf20 <__divsf3_pse+0x2c>
     f2e:	29 d0       	rcall	.+82     	; 0xf82 <__divsf3_pse+0x8e>
     f30:	fe 2f       	mov	r31, r30
     f32:	27 d0       	rcall	.+78     	; 0xf82 <__divsf3_pse+0x8e>
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	bb 1f       	adc	r27, r27
     f3c:	26 17       	cp	r18, r22
     f3e:	37 07       	cpc	r19, r23
     f40:	48 07       	cpc	r20, r24
     f42:	ab 07       	cpc	r26, r27
     f44:	b0 e8       	ldi	r27, 0x80	; 128
     f46:	09 f0       	breq	.+2      	; 0xf4a <__divsf3_pse+0x56>
     f48:	bb 0b       	sbc	r27, r27
     f4a:	80 2d       	mov	r24, r0
     f4c:	bf 01       	movw	r22, r30
     f4e:	ff 27       	eor	r31, r31
     f50:	93 58       	subi	r25, 0x83	; 131
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	2a f0       	brmi	.+10     	; 0xf60 <__divsf3_pse+0x6c>
     f56:	9e 3f       	cpi	r25, 0xFE	; 254
     f58:	51 05       	cpc	r21, r1
     f5a:	68 f0       	brcs	.+26     	; 0xf76 <__divsf3_pse+0x82>
     f5c:	74 c0       	rjmp	.+232    	; 0x1046 <__fp_inf>
     f5e:	be c0       	rjmp	.+380    	; 0x10dc <__fp_szero>
     f60:	5f 3f       	cpi	r21, 0xFF	; 255
     f62:	ec f3       	brlt	.-6      	; 0xf5e <__divsf3_pse+0x6a>
     f64:	98 3e       	cpi	r25, 0xE8	; 232
     f66:	dc f3       	brlt	.-10     	; 0xf5e <__divsf3_pse+0x6a>
     f68:	86 95       	lsr	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f7 95       	ror	r31
     f72:	9f 5f       	subi	r25, 0xFF	; 255
     f74:	c9 f7       	brne	.-14     	; 0xf68 <__divsf3_pse+0x74>
     f76:	88 0f       	add	r24, r24
     f78:	91 1d       	adc	r25, r1
     f7a:	96 95       	lsr	r25
     f7c:	87 95       	ror	r24
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret
     f82:	e1 e0       	ldi	r30, 0x01	; 1
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	88 1f       	adc	r24, r24
     f8a:	bb 1f       	adc	r27, r27
     f8c:	62 17       	cp	r22, r18
     f8e:	73 07       	cpc	r23, r19
     f90:	84 07       	cpc	r24, r20
     f92:	ba 07       	cpc	r27, r26
     f94:	20 f0       	brcs	.+8      	; 0xf9e <__divsf3_pse+0xaa>
     f96:	62 1b       	sub	r22, r18
     f98:	73 0b       	sbc	r23, r19
     f9a:	84 0b       	sbc	r24, r20
     f9c:	ba 0b       	sbc	r27, r26
     f9e:	ee 1f       	adc	r30, r30
     fa0:	88 f7       	brcc	.-30     	; 0xf84 <__divsf3_pse+0x90>
     fa2:	e0 95       	com	r30
     fa4:	08 95       	ret

00000fa6 <__fixunssfsi>:
     fa6:	7f d0       	rcall	.+254    	; 0x10a6 <__fp_splitA>
     fa8:	88 f0       	brcs	.+34     	; 0xfcc <__fixunssfsi+0x26>
     faa:	9f 57       	subi	r25, 0x7F	; 127
     fac:	90 f0       	brcs	.+36     	; 0xfd2 <__fixunssfsi+0x2c>
     fae:	b9 2f       	mov	r27, r25
     fb0:	99 27       	eor	r25, r25
     fb2:	b7 51       	subi	r27, 0x17	; 23
     fb4:	a0 f0       	brcs	.+40     	; 0xfde <__fixunssfsi+0x38>
     fb6:	d1 f0       	breq	.+52     	; 0xfec <__fixunssfsi+0x46>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	1a f0       	brmi	.+6      	; 0xfc8 <__fixunssfsi+0x22>
     fc2:	ba 95       	dec	r27
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__fixunssfsi+0x12>
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__fixunssfsi+0x46>
     fc8:	b1 30       	cpi	r27, 0x01	; 1
     fca:	81 f0       	breq	.+32     	; 0xfec <__fixunssfsi+0x46>
     fcc:	86 d0       	rcall	.+268    	; 0x10da <__fp_zero>
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	08 95       	ret
     fd2:	83 c0       	rjmp	.+262    	; 0x10da <__fp_zero>
     fd4:	67 2f       	mov	r22, r23
     fd6:	78 2f       	mov	r23, r24
     fd8:	88 27       	eor	r24, r24
     fda:	b8 5f       	subi	r27, 0xF8	; 248
     fdc:	39 f0       	breq	.+14     	; 0xfec <__fixunssfsi+0x46>
     fde:	b9 3f       	cpi	r27, 0xF9	; 249
     fe0:	cc f3       	brlt	.-14     	; 0xfd4 <__fixunssfsi+0x2e>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b3 95       	inc	r27
     fea:	d9 f7       	brne	.-10     	; 0xfe2 <__fixunssfsi+0x3c>
     fec:	3e f4       	brtc	.+14     	; 0xffc <__fixunssfsi+0x56>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__fp_cmp>:
     ffe:	99 0f       	add	r25, r25
    1000:	00 08       	sbc	r0, r0
    1002:	55 0f       	add	r21, r21
    1004:	aa 0b       	sbc	r26, r26
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	fe ef       	ldi	r31, 0xFE	; 254
    100a:	16 16       	cp	r1, r22
    100c:	17 06       	cpc	r1, r23
    100e:	e8 07       	cpc	r30, r24
    1010:	f9 07       	cpc	r31, r25
    1012:	c0 f0       	brcs	.+48     	; 0x1044 <__fp_cmp+0x46>
    1014:	12 16       	cp	r1, r18
    1016:	13 06       	cpc	r1, r19
    1018:	e4 07       	cpc	r30, r20
    101a:	f5 07       	cpc	r31, r21
    101c:	98 f0       	brcs	.+38     	; 0x1044 <__fp_cmp+0x46>
    101e:	62 1b       	sub	r22, r18
    1020:	73 0b       	sbc	r23, r19
    1022:	84 0b       	sbc	r24, r20
    1024:	95 0b       	sbc	r25, r21
    1026:	39 f4       	brne	.+14     	; 0x1036 <__fp_cmp+0x38>
    1028:	0a 26       	eor	r0, r26
    102a:	61 f0       	breq	.+24     	; 0x1044 <__fp_cmp+0x46>
    102c:	23 2b       	or	r18, r19
    102e:	24 2b       	or	r18, r20
    1030:	25 2b       	or	r18, r21
    1032:	21 f4       	brne	.+8      	; 0x103c <__fp_cmp+0x3e>
    1034:	08 95       	ret
    1036:	0a 26       	eor	r0, r26
    1038:	09 f4       	brne	.+2      	; 0x103c <__fp_cmp+0x3e>
    103a:	a1 40       	sbci	r26, 0x01	; 1
    103c:	a6 95       	lsr	r26
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	81 1d       	adc	r24, r1
    1042:	81 1d       	adc	r24, r1
    1044:	08 95       	ret

00001046 <__fp_inf>:
    1046:	97 f9       	bld	r25, 7
    1048:	9f 67       	ori	r25, 0x7F	; 127
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	08 95       	ret

00001052 <__fp_nan>:
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	80 ec       	ldi	r24, 0xC0	; 192
    1056:	08 95       	ret

00001058 <__fp_pscA>:
    1058:	00 24       	eor	r0, r0
    105a:	0a 94       	dec	r0
    105c:	16 16       	cp	r1, r22
    105e:	17 06       	cpc	r1, r23
    1060:	18 06       	cpc	r1, r24
    1062:	09 06       	cpc	r0, r25
    1064:	08 95       	ret

00001066 <__fp_pscB>:
    1066:	00 24       	eor	r0, r0
    1068:	0a 94       	dec	r0
    106a:	12 16       	cp	r1, r18
    106c:	13 06       	cpc	r1, r19
    106e:	14 06       	cpc	r1, r20
    1070:	05 06       	cpc	r0, r21
    1072:	08 95       	ret

00001074 <__fp_round>:
    1074:	09 2e       	mov	r0, r25
    1076:	03 94       	inc	r0
    1078:	00 0c       	add	r0, r0
    107a:	11 f4       	brne	.+4      	; 0x1080 <__fp_round+0xc>
    107c:	88 23       	and	r24, r24
    107e:	52 f0       	brmi	.+20     	; 0x1094 <__fp_round+0x20>
    1080:	bb 0f       	add	r27, r27
    1082:	40 f4       	brcc	.+16     	; 0x1094 <__fp_round+0x20>
    1084:	bf 2b       	or	r27, r31
    1086:	11 f4       	brne	.+4      	; 0x108c <__fp_round+0x18>
    1088:	60 ff       	sbrs	r22, 0
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__fp_round+0x20>
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	08 95       	ret

00001096 <__fp_split3>:
    1096:	57 fd       	sbrc	r21, 7
    1098:	90 58       	subi	r25, 0x80	; 128
    109a:	44 0f       	add	r20, r20
    109c:	55 1f       	adc	r21, r21
    109e:	59 f0       	breq	.+22     	; 0x10b6 <__fp_splitA+0x10>
    10a0:	5f 3f       	cpi	r21, 0xFF	; 255
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <__fp_splitA+0x1a>
    10a4:	47 95       	ror	r20

000010a6 <__fp_splitA>:
    10a6:	88 0f       	add	r24, r24
    10a8:	97 fb       	bst	r25, 7
    10aa:	99 1f       	adc	r25, r25
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <__fp_splitA+0x20>
    10ae:	9f 3f       	cpi	r25, 0xFF	; 255
    10b0:	79 f0       	breq	.+30     	; 0x10d0 <__fp_splitA+0x2a>
    10b2:	87 95       	ror	r24
    10b4:	08 95       	ret
    10b6:	12 16       	cp	r1, r18
    10b8:	13 06       	cpc	r1, r19
    10ba:	14 06       	cpc	r1, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	f2 cf       	rjmp	.-28     	; 0x10a4 <__fp_split3+0xe>
    10c0:	46 95       	lsr	r20
    10c2:	f1 df       	rcall	.-30     	; 0x10a6 <__fp_splitA>
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <__fp_splitA+0x30>
    10c6:	16 16       	cp	r1, r22
    10c8:	17 06       	cpc	r1, r23
    10ca:	18 06       	cpc	r1, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	f1 cf       	rjmp	.-30     	; 0x10b2 <__fp_splitA+0xc>
    10d0:	86 95       	lsr	r24
    10d2:	71 05       	cpc	r23, r1
    10d4:	61 05       	cpc	r22, r1
    10d6:	08 94       	sec
    10d8:	08 95       	ret

000010da <__fp_zero>:
    10da:	e8 94       	clt

000010dc <__fp_szero>:
    10dc:	bb 27       	eor	r27, r27
    10de:	66 27       	eor	r22, r22
    10e0:	77 27       	eor	r23, r23
    10e2:	cb 01       	movw	r24, r22
    10e4:	97 f9       	bld	r25, 7
    10e6:	08 95       	ret

000010e8 <__gesf2>:
    10e8:	8a df       	rcall	.-236    	; 0xffe <__fp_cmp>
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <__gesf2+0x6>
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	08 95       	ret

000010f0 <__mulsf3>:
    10f0:	0b d0       	rcall	.+22     	; 0x1108 <__mulsf3x>
    10f2:	c0 cf       	rjmp	.-128    	; 0x1074 <__fp_round>
    10f4:	b1 df       	rcall	.-158    	; 0x1058 <__fp_pscA>
    10f6:	28 f0       	brcs	.+10     	; 0x1102 <__mulsf3+0x12>
    10f8:	b6 df       	rcall	.-148    	; 0x1066 <__fp_pscB>
    10fa:	18 f0       	brcs	.+6      	; 0x1102 <__mulsf3+0x12>
    10fc:	95 23       	and	r25, r21
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__mulsf3+0x12>
    1100:	a2 cf       	rjmp	.-188    	; 0x1046 <__fp_inf>
    1102:	a7 cf       	rjmp	.-178    	; 0x1052 <__fp_nan>
    1104:	11 24       	eor	r1, r1
    1106:	ea cf       	rjmp	.-44     	; 0x10dc <__fp_szero>

00001108 <__mulsf3x>:
    1108:	c6 df       	rcall	.-116    	; 0x1096 <__fp_split3>
    110a:	a0 f3       	brcs	.-24     	; 0x10f4 <__mulsf3+0x4>

0000110c <__mulsf3_pse>:
    110c:	95 9f       	mul	r25, r21
    110e:	d1 f3       	breq	.-12     	; 0x1104 <__mulsf3+0x14>
    1110:	95 0f       	add	r25, r21
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	55 1f       	adc	r21, r21
    1116:	62 9f       	mul	r22, r18
    1118:	f0 01       	movw	r30, r0
    111a:	72 9f       	mul	r23, r18
    111c:	bb 27       	eor	r27, r27
    111e:	f0 0d       	add	r31, r0
    1120:	b1 1d       	adc	r27, r1
    1122:	63 9f       	mul	r22, r19
    1124:	aa 27       	eor	r26, r26
    1126:	f0 0d       	add	r31, r0
    1128:	b1 1d       	adc	r27, r1
    112a:	aa 1f       	adc	r26, r26
    112c:	64 9f       	mul	r22, r20
    112e:	66 27       	eor	r22, r22
    1130:	b0 0d       	add	r27, r0
    1132:	a1 1d       	adc	r26, r1
    1134:	66 1f       	adc	r22, r22
    1136:	82 9f       	mul	r24, r18
    1138:	22 27       	eor	r18, r18
    113a:	b0 0d       	add	r27, r0
    113c:	a1 1d       	adc	r26, r1
    113e:	62 1f       	adc	r22, r18
    1140:	73 9f       	mul	r23, r19
    1142:	b0 0d       	add	r27, r0
    1144:	a1 1d       	adc	r26, r1
    1146:	62 1f       	adc	r22, r18
    1148:	83 9f       	mul	r24, r19
    114a:	a0 0d       	add	r26, r0
    114c:	61 1d       	adc	r22, r1
    114e:	22 1f       	adc	r18, r18
    1150:	74 9f       	mul	r23, r20
    1152:	33 27       	eor	r19, r19
    1154:	a0 0d       	add	r26, r0
    1156:	61 1d       	adc	r22, r1
    1158:	23 1f       	adc	r18, r19
    115a:	84 9f       	mul	r24, r20
    115c:	60 0d       	add	r22, r0
    115e:	21 1d       	adc	r18, r1
    1160:	82 2f       	mov	r24, r18
    1162:	76 2f       	mov	r23, r22
    1164:	6a 2f       	mov	r22, r26
    1166:	11 24       	eor	r1, r1
    1168:	9f 57       	subi	r25, 0x7F	; 127
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	8a f0       	brmi	.+34     	; 0x1190 <__mulsf3_pse+0x84>
    116e:	e1 f0       	breq	.+56     	; 0x11a8 <__mulsf3_pse+0x9c>
    1170:	88 23       	and	r24, r24
    1172:	4a f0       	brmi	.+18     	; 0x1186 <__mulsf3_pse+0x7a>
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	bb 1f       	adc	r27, r27
    117a:	66 1f       	adc	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	88 1f       	adc	r24, r24
    1180:	91 50       	subi	r25, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	a9 f7       	brne	.-22     	; 0x1170 <__mulsf3_pse+0x64>
    1186:	9e 3f       	cpi	r25, 0xFE	; 254
    1188:	51 05       	cpc	r21, r1
    118a:	70 f0       	brcs	.+28     	; 0x11a8 <__mulsf3_pse+0x9c>
    118c:	5c cf       	rjmp	.-328    	; 0x1046 <__fp_inf>
    118e:	a6 cf       	rjmp	.-180    	; 0x10dc <__fp_szero>
    1190:	5f 3f       	cpi	r21, 0xFF	; 255
    1192:	ec f3       	brlt	.-6      	; 0x118e <__mulsf3_pse+0x82>
    1194:	98 3e       	cpi	r25, 0xE8	; 232
    1196:	dc f3       	brlt	.-10     	; 0x118e <__mulsf3_pse+0x82>
    1198:	86 95       	lsr	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	b7 95       	ror	r27
    11a0:	f7 95       	ror	r31
    11a2:	e7 95       	ror	r30
    11a4:	9f 5f       	subi	r25, 0xFF	; 255
    11a6:	c1 f7       	brne	.-16     	; 0x1198 <__mulsf3_pse+0x8c>
    11a8:	fe 2b       	or	r31, r30
    11aa:	88 0f       	add	r24, r24
    11ac:	91 1d       	adc	r25, r1
    11ae:	96 95       	lsr	r25
    11b0:	87 95       	ror	r24
    11b2:	97 f9       	bld	r25, 7
    11b4:	08 95       	ret

000011b6 <_exit>:
    11b6:	f8 94       	cli

000011b8 <__stop_program>:
    11b8:	ff cf       	rjmp	.-2      	; 0x11b8 <__stop_program>
